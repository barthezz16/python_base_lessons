# -*- coding: utf-8 -*-


# Описание предметной области:
#
# При торгах на бирже совершаются сделки - один купил, второй продал.
# Покупают и продают ценные бумаги (акции, облигации, фьючерсы, етс). Ценные бумаги - это по сути долговые расписки.
# Ценные бумаги выпускаются партиями, от десятка до несколько миллионов штук.
# Каждая такая партия (выпуск) имеет свой торговый код на бирже - тикер - https://goo.gl/MJQ5Lq
# Все бумаги из этой партии (выпуска) одинаковы в цене, поэтому говорят о цене одной бумаги.
# У разных выпусков бумаг - разные цены, которые могут отличаться в сотни и тысячи раз.
# Каждая биржевая сделка характеризуется:
#   тикер ценнной бумаги
#   время сделки
#   цена сделки
#   обьем сделки (сколько ценных бумаг было куплено)
#
# В ходе торгов цены сделок могут со временем расти и понижаться. Величина изменения цен называтея волатильностью.
# Например, если бумага №1 торговалась с ценами 11, 11, 12, 11, 12, 11, 11, 11 - то она мало волатильна.
# А если у бумаги №2 цены сделок были: 20, 15, 23, 56, 100, 50, 3, 10 - то такая бумага имеет большую волатильность.
# Волатильность можно считать разными способами, мы будем считать сильно упрощенным способом -
# отклонение в процентах от средней цены за торговую сессию:
#   средняя цена = (максимальная цена + минимальная цена) / 2
#   волатильность = ((максимальная цена - минимальная цена) / средняя цена) * 100%
# Например для бумаги №1:
#   average_price = (12 + 11) / 2 = 11.5
#   volatility = ((12 - 11) / average_price) * 100 = 8.7%
# Для бумаги №2:
#   average_price = (100 + 3) / 2 = 51.5
#   volatility = ((100 - 3) / average_price) * 100 = 188.34%
#
# В реальности волатильность рассчитывается так: https://goo.gl/VJNmmY
#
# Задача: вычислить 3 тикера с максимальной и 3 тикера с минимальной волатильностью.
# Бумаги с нулевой волатильностью вывести отдельно.
# Результаты вывести на консоль в виде:
#   Максимальная волатильность:
#       ТИКЕР1 - ХХХ.ХХ %
#       ТИКЕР2 - ХХХ.ХХ %
#       ТИКЕР3 - ХХХ.ХХ %
#   Минимальная волатильность:
#       ТИКЕР4 - ХХХ.ХХ %
#       ТИКЕР5 - ХХХ.ХХ %
#       ТИКЕР6 - ХХХ.ХХ %
#   Нулевая волатильность:
#       ТИКЕР7, ТИКЕР8, ТИКЕР9, ТИКЕР10, ТИКЕР11, ТИКЕР12
# Волатильности указывать в порядке убывания. Тикеры с нулевой волатильностью упорядочить по имени.
#
# Подготовка исходных данных
# 1. Скачать файл https://drive.google.com/file/d/1l5sia-9c-t91iIPiGyBc1s9mQ8RgTNqb/view?usp=sharing
#       (обратите внимание на значок скачивания в правом верхнем углу,
#       см https://drive.google.com/file/d/1M6mW1jI2RdZhdSCEmlbFi5eoAXOR3u6G/view?usp=sharing)
# 2. Раззиповать средствами операционной системы содержимое архива
#       в папку python_base_source/lesson_012/trades
# 3. В каждом файле в папке trades содержится данные по сделакам по одному тикеру, разделенные запятыми.
#   Первая строка - название колонок:
#       SECID - тикер
#       TRADETIME - время сделки
#       PRICE - цена сделки
#       QUANTITY - количество бумаг в этой сделке
#   Все последующие строки в файле - данные о сделках
#
# Подсказка: нужно последовательно открывать каждый файл, вычитывать данные, высчитывать волатильность и запоминать.
# Вывод на консоль можно сделать только после обработки всех файлов.
#
# Для плавного перехода к мультипоточности, код оформить в обьектном стиле, используя следующий каркас
#
# class <Название класса>:
#
#     def __init__(self, <параметры>):
#         <сохранение параметров>
#
#     def run(self):
#         <обработка данных>
import os


class VolatilityAnalyser:

    # TODO Класс надо заточить под обработку одного файла, а вне класса пройтись по директории
    # TODO И для каждого файла создать по объекту для расчётов
    # TODO Потом пройти по всем объектам и собрать результаты вместе.
    # TODO Эти все сложности помогут легче выполнить два следующих задания)
    def __init__(self):
        self.files_to_open = None
        self.data = {}
        self.price_list = []
        self.value = []
        self.average_price = 0
        self.volatility = 0
        self.secid = 0
        self.tradetime = 0
        self.price = 0
        self.quantity = 0
        self.result = {}
        self.zero_volatility = []
        self.min_volatility = {}
        self.max_volatility = {}

    def run(self, file_to_read):
        self.file_analytics(file_to_read)

    def file_analytics(self, file_to_read):
        with open(os.path.join('trades', file_to_read), 'r') as file:
            for line in file.readlines()[1:]:
                self.secid, self.tradetime, self.price, self.quantity = line.split(',')
                self.price_list.append((float(self.price)))
                self.data[self.secid] = self.price_list
            self.value = list(self.data.values())
            self.average_price = (min(self.value[0]) + max(self.value[0])) / 2
            self.volatility = ((max(self.value[0]) - min(self.value[0])) / self.average_price) * 100
            self.result[self.secid] = self.volatility
            # return self.zero_volatility, self.result
        self.sort_result_list()
        # Максим можно попростить совет, вылетело из головы и никак не могу понять, как мне
        # получать значения result не в цикле,
        # а после того как весь цикл со всеми файлами пройдет, и в конце выдаст
        # два полностью сформированных словаря self.zero_volatility и self.result.
        # TODO Можно создать список объектов в цикле [VolatilityAnalyser(файл) фор файл ин директория]
        # TODO Затем пройти по списку - запустить метод для расчётов
        # TODO Затем пройти по списку и сформировать результаты в общий словарь/список

    def sort_result_list(self):
        for i in sorted(self.result.items(), key=lambda x: x[1]):
            print(i)
        if float(*self.result.values()) == 0.0:
            self.zero_volatility.append(*self.result)
            print(f'Нулевая волатильность: \n {self.zero_volatility}')


for files in os.listdir('trades'):
    analyser = VolatilityAnalyser()
    analyser.run(file_to_read=files)
# TODO Ещё было бы удобно выделить сортировку и печать в отдельную функцию
# TODO И ещё одну функцию-генератор создать, которая на вход будет получать путь к директории
# TODO А на выход будет выдавать путь к файлу из директории
# TODO Эти две функции можно будет вынести в отдельный модуль и импортировать в каждое из заданий этого модуля
